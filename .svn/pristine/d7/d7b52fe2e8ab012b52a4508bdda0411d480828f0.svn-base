class RelatedElement      
    
    def initialize (element)
      @element=element        
       
    end
    
    def get_related_elements(element_type)
      if I18n.locale.to_s == "gl"
        search_languages=["gl","es"]
      else 
        search_languages=[I18n.locale.to_s]
      end

      search_terms = TaggableTagAnnotation.where(:taggable_id => @element.id, :type_tag => ["automatic","automatic_from_human"],:taggable_type => @element.class).order("weight DESC").first(30).map { |t| '"' + Util.to_hashtag(t.tag.name) + '"' if t.tag.name != nil}.join(" ")                   
                        
      @search = element_type.constantize.search do |query|                                    
          query.fulltext search_terms, :fields => [:w100_wikitopics, :w95_wikitopics, :w90_wikitopics, :w85_wikitopics, :w80_wikitopics, :w75_wikitopics, :w70_wikitopics, :w65_wikitopics, :w60_wikitopics, :w55_wikitopics, :w50_wikitopics] do
            boost_fields :w100_wikitopics => 10.0
            boost_fields :w95_wikitopics => 9.5
            boost_fields :w90_wikitopics => 9
            boost_fields :w85_wikitopics => 8.5
            boost_fields :w80_wikitopics => 8.0
            boost_fields :w75_wikitopics => 7.5
            boost_fields :w70_wikitopics => 7.0
            boost_fields :w65_wikitopics => 6.5
            boost_fields :w60_wikitopics => 6.0
            boost_fields :w55_wikitopics => 5.5
            boost_fields :w50_wikitopics => 5.0
            minimum_match 1
          end        
=begin
          search_terms = @element.tags.map { |t| '"' + t.name + '"' if t.name != nil}.join(", ")
          query.fulltext search_terms do
            boost_fields :name => 3.0
            boost_fields :tags => 3.0
            boost_fields :description => 1.0
            #phrase_fields :name => 8.0
            #phrase_fields :tags => 20.0
            minimum_match 2
          end
=end          
          if @element.class == element_type.constantize
              query.without(:id, @element.id)
          end
          query.with(:translations, search_languages) 
          query.paginate :per_page => 4
       end
       @result=@search.results       
       return @result
    end
    
     def get_all_related_elements(element_type,page)                  
      @search = element_type.constantize.search do |query|                       
          search_terms = @element.categories.map { |t| '"' + t.name + '"' if t.name != nil }.join(", ")+","+@element.tags.map { |t| '"' + t.name + '"' if t.name != nil}.join(", ")
          query.keywords search_terms, :fields => [:categories, :tags, :name] {minimum_match 1}
          if @element.class == element_type.constantize
              query.without(:id, @element.id)
          end
          #query.with(:translations, [I18n.locale.to_s])  
          query.paginate :page => page, :per_page => 32
       end
       @result=@search.results       
       return @result
    end
  
end
