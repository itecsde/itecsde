class Search
  
  def self.search_elements_by_type(element_type,search_text,article_id,results_per_page,page = 1)
    if I18n.locale.to_s == "gl"
      search_languages = ["gl","es"]
    else 
      search_languages = [I18n.locale.to_s]
    end
    
    #CASO DE BUSQUEDA DESAMBIAGUADA buscamos por ActiveRecord
    if search_text != nil && search_text.index("#") != nil &&  search_text.index("#") == 0      
      #Si accedemos por la URL de desambiguacion viene con article id      
      if article_id != nil
        if results_per_page == 4 #Busqueda general esta limitada a 4 resultados (aumento de velocidad)
          tags_annotations = TaggableTagAnnotation.where(:wikipedia_article_id => article_id, :taggable_type => element_type).order("weight DESC").limit(results_per_page)
          elements_results = element_type.constantize.find_all_by_id(tags_annotations.map{|annotation| annotation.taggable_id}).first(results_per_page)
        else #Busqueda en un recurso particular ya no esta limitada
          tags_annotations = TaggableTagAnnotation.where(:wikipedia_article_id => article_id, :taggable_type => element_type).order("weight DESC")
          elements_results = element_type.constantize.find_all_by_id(tags_annotations.map{|annotation| annotation.taggable_id})
        end
        if elements_results.size > 0
           elements = Sunspot::Search::PaginatedCollection.new(elements_results,1,elements_results.size,elements_results.size)
           num_results = elements_results.size
        else
           search = element_type.constantize.search do 
              fulltext "cllldsojfndjdujdsksooeinsujhdff"                
              paginate :page => page, :per_page => results_per_page 
           end
           elements = search.results
           num_results=search.total           
        end
      #Si NO accedemos por la URL de desambiguacion. Puesto a saco la # en buscador                        
      else
        search_terms = Util.to_tag(search_text)
        tag_search_terms = Tag.find_by_name(search_terms)
        if tag_search_terms != nil 
          if results_per_page == 4 #Busqueda general esta limitada a 4 resultados (aumento de velocidad)
            tags_annotations = TaggableTagAnnotation.where(:tag_id => tag_search_terms.id, :taggable_type => element_type, :type_tag => ["automatic","automatic_from_human"]).order("weight DESC").limit(results_per_page)
            elements_results = element_type.constantize.find_all_by_id(tags_annotations.map{|annotation| annotation.taggable_id}).first(results_per_page)
          else #Busqueda en un recurso particular ya no esta limitada
            tags_annotations = TaggableTagAnnotation.where(:tag_id => tag_search_terms.id, :taggable_type => element_type, :type_tag => ["automatic","automatic_from_human"]).order("weight DESC")
            elements_results = element_type.constantize.find_all_by_id(tags_annotations.map{|annotation| annotation.taggable_id})
          end
          if elements_results.size > 0
            elements = Sunspot::Search::PaginatedCollection.new(elements_results,1,elements_results.size,elements_results.size)
          else
            search = element_type.constantize.search do 
              fulltext "cllldsojfndjdujdsksooeinsujhdff"                
              paginate :page => page, :per_page => results_per_page 
            end
            elements = search.results
            num_results=search.total
          end
        else
          search = element_type.constantize.search do 
            fulltext "cllldsojfndjdujdsksooeinsujhdff"                
            paginate :page => page, :per_page => results_per_page 
          end
          elements = search.results
          num_results = search.total          
        end                
      end                      
      return :results => elements, :total => num_results                
        
    #CASO DE BUSQUEDA SIN DESAMBIGUAR (Como no pudimos poner bien el tokenizador lo separamos, si no con esto ya valdria)
    else 
      search_terms = search_text 
      search = element_type.constantize.search do |query|
        query.fulltext search_terms do
          boost_fields :hashtags_100 => 10.0
          boost_fields :hashtags_95 => 9.5
          boost_fields :hashtags_90 => 9
          boost_fields :hashtags_85 => 8.5
          boost_fields :hashtags_80 => 8.0
          boost_fields :hashtags_75 => 7.5
          boost_fields :hashtags_70 => 7.0
          boost_fields :hashtags_65 => 6.5
          boost_fields :hashtags_60 => 6.0
          boost_fields :hashtags_55 => 5.5
          boost_fields :hashtags_50 => 5.0
          
          boost_fields :tags => 4.0          
          #phrase_fields :tags => 10.0 
          #query.keywords search_terms, :fields => [:categories, :tags, :name] {minimum_match 1}       
        end        
        query.with(:translations, search_languages)  
        query.paginate :page => page, :per_page => results_per_page 
      end
      elements = search.results
      num_results = search.total       
      return :results => elements, :total => num_results      
    end
   
  end
  
  
  
  def self.disambiguation(search_text)
    disambiguation = Array.new
    if search_text != nil && search_text.index("#") == nil 
      wiki = Wikipediator.new
      begin 
        disamb_results = wiki.search(search_text)
        disamb_results.each do |alternative_search|
          title = alternative_search['title']
          definition = wiki.getDefinition(title)
          id = alternative_search['id']
          disambiguation << [title, definition, id] #[title, definition]
        end      
      rescue
      end
    end
    return disambiguation
  end
  
  
end