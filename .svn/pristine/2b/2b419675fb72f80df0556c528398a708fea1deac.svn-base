class PeopleController < ApplicationController
  def index
    @resource_type = "Person"    
    if I18n.locale.to_s == "gl"
      search_languages=["gl","es"]
    else 
      search_languages=[I18n.locale.to_s]
    end    
    if (params[:advanced_search]=="1") 
      @search=Person.search do
          if params[:enriched]=="0"            
             without(:itec_id, nil)
          end
          keywords params[:keywords], :fields => [:tags] 
          if params[:subject]!=""
            keywords Subject.find(params[:subject]).name
          end          
          if params[:radius]!="" && params[:person_latitude]!="" && params[:person_longitude]!=""
            with(:location).in_radius(params[:person_latitude], params[:person_longitude], params[:radius])
          end
          if params[:person_latitude]!="" && params[:person_longitude]!=""
            order_by_geodist(:location, params[:person_latitude], params[:person_longitude])
          end
          with(:translations, search_languages)
          paginate :page => params[:page], :per_page => 30           
        end
      @people = @search.results
      @num_results=@search.total
    
    elsif (params[:search] != nil && params[:search].size > 0)
      @search = Person.search do |query|                       
          search_terms = params[:search]
          query.keywords search_terms, :fields => [:categories, :tags, :name] {minimum_match 1}
          query.with(:translations, search_languages)         
          query.paginate :page => params[:page], :per_page => 30
      end
      @people = @search.results
      @num_results = @search.total    
    
    else
      #@search = Person.search do
      #  fulltext params[:search]
      #  order_by :updated_at, :desc
      #  paginate :page => params[:page], :per_page => 30
      #end
      @search = Person.search do |query|
        if current_user != nil && current_user.circumstances != []
          search_terms = current_user.circumstances.first.tag_list + ", " + current_user.circumstances.first.subject.name
          query.keywords search_terms, :fields => [:tags, :subjects] {minimum_match 1}
       
          if current_user.circumstances.first.latitude!=nil  
            query.order_by_geodist(:location, current_user.circumstances.first.latitude, current_user.circumstances.first.longitude)
          end
        end
        query.with(:translations, search_languages)
        query.paginate :page => params[:page],:per_page => 30 
      end
      @people = @search.results 
      @num_results=@search.total   
    end
    
    @previous_search_params=params

    
  
    @subjects=Subject.all
     
    respond_to do |format|
      format.html # index.html.erb
      format.json { render json: @people }
    end
  end
  
  # GET /people/1
  # GET /people/1.json
  def show
    @person = Person.find(params[:id]) 
    @is_edition=false
    @subjects=Subject.all
    @contextual_languages=ContextualLanguage.all
    @edition_mode=false
    @resource_type="Person"    

    
    if notice == 'Person was successfully created.' || notice == 'Person was successfully updated.'
      @previous_action = 'saved'
    else
      @previous_action = 'list'
    end
    
    respond_to do |format|
      format.html # show.html.erb
      format.json { render json: @person }
    end
    
  end
  
  # GET /people/new
  # GET /people/new.json
  def new
    if current_user != nil 
      @person = Person.new
      @is_edition=true
      @subjects=Subject.all
      @contextual_languages=ContextualLanguage.all
      @edition_mode=true
  
      
      respond_to do |format|
        format.html # new.html.erb
        format.json { render json: @person }
      end
    else 
      redirect_to people_path
    end
  end
  
    # GET /people/1/edit
  def edit
    @person = Person.find(params[:id])
    if current_user !=nil && ((@person.owner == current_user) or (@person.owner_type=="Group" && @person.owner.users.exists?(current_user)))
      @is_edition=true
      @subjects=Subject.all
      @contextual_languages=ContextualLanguage.all
      @edition_mode=true
    else
      redirect_to person_path(@person)
    end


  end

  # POST /people
  # POST /people.json
  def create
    @person = Person.new(params[:person])
    if (params[:person][:owner_type]==nil)
      @person.owner_type="User"
      @person.owner=current_user
    end
    @person.creator = current_user
    @person.save

    respond_to do |format|
      if @person.save
        format.html { redirect_to @person, notice: 'Person was successfully created.' }
        format.json { render json: @person, status: :created, location: @person }
      else
        format.html { render action: "new" }
        format.json { render json: @person.errors, status: :unprocessable_entity }
      end
    end
  end

  # PUT /people/1
  # PUT /people/1.json
  def update
    @person = Person.find(params[:id])
    if (params[:person][:owner_type]==nil)
      @person.owner_type="User"
      @person.owner=current_user
    end
    @person.subjects.destroy_all
    @person.contextual_languages.destroy_all
    
    respond_to do |format|
      if @person.update_attributes(params[:person])
        format.html { redirect_to @person, notice: 'Person was successfully updated.' }
        format.json { head :ok }
      else
        format.html { render action: "edit" }
        format.json { render json: @person.errors, status: :unprocessable_entity }
      end
    end
  end

  # DELETE /people/1
  # DELETE /people/1.json
  def destroy
    @person = Person.find(params[:id])
    @person.destroy

    respond_to do |format|
      format.html { redirect_to people_url }
      format.json { head :ok }
    end
  end
  
  def popup_show_person
    @person = Person.find(params[:element_id])
    @subjects=Subject.all
    @contextual_languages=ContextualLanguage.all
    @edition_mode=false

    respond_to do |format|
      format.js
    end
  end
end