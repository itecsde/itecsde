# encoding: utf-8

require 'capybara/rails'
require "capybara"

#require "capybara/dsl"
class ScraperArtworks
  include ActionView::Helpers::SanitizeHelper
  #include Capybara::DSL
  #############################################################
  ####### scrape_google_art_project
  #############################################################
  def scrape_google_art_project
    begin
      Capybara.register_driver :webkit_ignore_ssl do |app|
        browser = Capybara::Driver::Webkit::Browser.new(:ignore_ssl_errors => true)
        Capybara::Driver::Webkit.new(app, :browser => browser)
      end
      Capybara.javascript_driver = :webkit_ignore_ssl
      session = Capybara::Session.new(:webkit)   
      session.visit "https://www.google.com/culturalinstitute/collections"
      
      puts session.body.size
      
      session.find(".collections-ui-button").click
     
        
      puts session.body.size  
        
      sleep 2
      
      session.find(".collections-ui-button").click
      
      puts session.body.size
      
      sleep 2
      
      session.find(".collections-ui-button").click
      
      puts session.body.size
      
     sleep 2
      
      session.find(".collections-ui-button").click
      
      puts session.body.size

      
sleep 122      
      
      
            session.save_and_open_page
      
      sleep 1
      session.click_button 'Loading more items...'
      sleep 1
      session.click_button 'Loading more items...'
      sleep 1
      session.click_button 'Loading more items...'
      sleep 1
      session.click_button 'Loading more items...'
      sleep 1
      session.click_button 'Loading more items...'
      sleep 1
      session.click_button 'Loading more items...'
      sleep 1
      session.click_button 'Loading more items...'
      sleep 1
      session.click_button 'Loading more items...'
      sleep 1
    

    rescue Exception => e
      puts "Failed scrape_google_art_project"
      puts e.message
      puts e.backtrace.inspect
    end
 
  end
  def scrape_collection_google_art_project(collection_url)
    begin
      puts "Collection url: " + collection_url
      disabled = false
      artwork_id = -1
      i=0
      
      Capybara.register_driver :webkit_ignore_ssl do |app|
        browser = Capybara::Driver::Webkit::Browser.new(:ignore_ssl_errors => true)
        Capybara::Driver::Webkit.new(app, :browser => browser)
      end
      Capybara.javascript_driver = :webkit_ignore_ssl
      session = Capybara::Session.new(:webkit)   
      session.visit "https://www.google.com/culturalinstitute/collection/hillwood-estate-museum-gardens"
      
      puts "Recorriendo la galeria."
      
      while disabled != true
        session.find('.SPRITE_icon_asset_viewer_nav_right_arrow').click
        sleep 0.3
        nokogiri_clicked_page = Nokogiri::HTML(session.body)
        if nokogiri_clicked_page.css("div.gci-page-arrow")[1]['disabled'] == "disabled"
          disabled = true
        end
      end
     
      sleep 1            
      puts "Disfrutando de la coleccion."                              
  
      nokogiri_html_collection_page = Nokogiri::HTML(session.body)
      nokogiri_html_collection_page.css("div.gci-asset-gallery-item").each do |artwork|  
        artwork_id += 1
        begin
          photo_url = artwork.css(".gci-asset-gallery div.collections-image-holder div.holder-background")[0]['style']
          if photo_url.include? "=s"
            photo_url = photo_url.split("url(")[1].split("=s")[0]
          else
            photo_url = photo_url.split("url(")[1].split(");")[0]
          end
        rescue
          puts "Exception photo_url art_project"
        end      
        session.all('.gci-asset-gallery div.gci-asset-title-date a.gci-asset-title')[artwork_id].click
        session.click_button 'Details'
        nokogiri_html_detail_page = Nokogiri::HTML(session.body)
        artwork_url = session.current_url
        scrape_artwork_google_art_project artwork_url, photo_url, nokogiri_html_detail_page      
      end #do artwork
    rescue Exception => e
      puts "Failed scrape_collection_google_art_project"
      puts e.message
      puts e.backtrace.inspect
    end 
  end
  
  def scrape_artwork_google_art_project(artwork_url, photo_url, nokogiri_html_detail_page)
    begin
      manual_tags = Array.new
      name = ""
      description = ""
      prosa = ""
      idiomas_disponibles = []
      
      puts artwork_url
      
      begin
        name = nokogiri_html_detail_page.css("h1.gci-unified-header-title-container span.gci-asset-viewer-title")[0].text.strip
      rescue
        puts "Exception name art_project"
      end
      
      puts name
      
      begin
        description = nokogiri_html_detail_page.css("div.gci-asset-viewer-tab-description-content")[0].text.strip
      rescue
        puts "Exception description art_project"
      end
      
      begin
        author = nokogiri_html_detail_page.css("span.gci-asset-viewer-creator")[0].text.strip       
      rescue
        puts "Failed Author art_project"
      end

      begin
        museum = nokogiri_html_detail_page.css("a.gci-asset-viewer-partner")[0].text.strip       
      rescue
        puts "Failed museum art_project"
      end
      
      begin
        url = artwork_url
      rescue
        puts "Exception URL art_project"
      end      
      
      manual_tags << author
      manual_tags << museum

      if name != nil
        prosa = prosa + name
      end
      if description != nil
        prosa = prosa + ". " + description
      end   

      scraped_artwork = Artwork.new
      scraped_artwork.name = name
      scraped_artwork.description = description
      if photo_url!=nil
        begin
          scraped_artwork.element_image = URI.parse(photo_url)
        rescue
          puts "art_project: IMAGEN NO GUARDADA"
          scraped_artwork.element_image.clear
        end
      end      
      scraped_artwork.url = url
      scraped_artwork.link = url
      scraped_artwork.scraped_from = "https://www.google.com/culturalinstitute/project/art-project"
      scraped_artwork.persist(idiomas_disponibles, prosa, manual_tags)
    rescue Exception => e
      puts "Failed scrape_artwork_google_art_project"
      puts e.message
      puts e.backtrace.inspect
    end
  end

end #class