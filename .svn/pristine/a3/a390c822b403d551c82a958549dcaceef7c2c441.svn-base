# encoding: utf-8
require 'capybara/rails'
require "capybara"
require "capybara/dsl"
require 'watir-webdriver'
require 'net/http'
require 'net/https'
require 'uri'
require 'mechanize'
    
class ScraperKlascements
  include ActionView::Helpers::SanitizeHelper
  include Capybara::DSL
  
  #########################################################
  ## scrape_klascement
  ##################################################
  
  def scrape_klascement(email,password)
    begin   
      source_name = __method__.to_s    
      #Add new source, or select it if exists
      source = Source.create_or_select_source(source_name, "Klascement", "http://www.klascement.be")
      
      agent = Mechanize.new
      page = agent.get('http://www.klascement.be/aanmelden/?set_language=4')
      klascement_form = page.form_with(:id => 'bigLogin')
      klascement_form.txtLoginEmail = email
      klascement_form.txtLoginPassword = password
    
      page = agent.submit(klascement_form)
      resources_page = agent.click(page.link_with(:text => /All educational resources/))  
      nokogiri_resources_page = Nokogiri::HTML(resources_page.body)
      
      number_of_resources = nokogiri_resources_page.css("div.column div#total_result")[0].text.strip.to_i   
      number_of_pages = number_of_resources / 10 + 1
              
      for i in 1..number_of_pages
        puts "actual page: "
        puts "http://www.klascement.be/ajax/load_contributions.php?page=" + i.to_s
        resources_page = agent.get("http://www.klascement.be/ajax/load_contributions.php?page=" + i.to_s + "?set_language=4").body
        nokogiri_resources_page = Nokogiri::HTML(resources_page)
        nokogiri_resources_page.css(".contribution_survey .title a").each do |resource|
          resource_url = resource['href'].gsub("?previous","")
          resource_url = "http://www.klascement.be" + "/" + resource_url.split("/").last
          resource_url_nl = resource_url + "?set_language=9"
          resource_url_en = resource_url + "?set_language=4"
          if Klascement.where(:url => resource_url).size == 0
            resource_page = agent.get(resource_url)
            nokogiri_resource_page = Nokogiri::HTML(resource_page.body)
            begin
              name = nokogiri_resource_page.css("div.column h1")[0].text.strip
            rescue Exception => e
              puts "Exception name klascement"
              puts e.message
            end
            if name != "Points" and name != "Punten"
              resource_page_en = agent.get(resource_url_en)
              resource_page_nl = agent.get(resource_url_nl)
              scrape_resource_klascement(resource_url, resource_url_en, resource_url_nl, resource_page_en.body, resource_page_nl.body)
            end
          else
            puts "Resource exists => do not visit it"
          end
        end
      end
      source.correct_scrape
    rescue Exception => e
      puts "Exception scrape_klascement"
      puts e.message
      puts e.backtrace.inspect
      source.incorrect_scrape
    end
  end
  
  
  def scrape_resource_klascement(resource_url, resource_url_en, resource_url_nl, raw_html_en, raw_html_nl, *reintentos)
    begin
      puts "RESOURCE_URL: "
      puts resource_url
      name_en = ""
      description_en = ""
      idiomas_disponibles = Array.new
      manual_tags = Array.new
          
      if reintentos[0]==1
        reintentos = reintentos[1].to_i
      else
        reintentos = 2
      end
      
      scraped_resource = Klascement.new
      if Klascement.where(:url => resource_url).size == 0
        nokogiri_resource_page_nl = Nokogiri::HTML(raw_html_nl)
        nokogiri_resource_page_en = Nokogiri::HTML(raw_html_en)
      elsif Klascement.where(:url => resource_url).first.raw_html != nil
        I18n.locale = "nl"
        nokogiri_resource_page_nl = Nokogiri::HTML(Klascement.where(:url => resource_url).first.raw_html)
        I18n.locale = "en"
        nokogiri_resource_page_en = Nokogiri::HTML(Klascement.where(:url => resource_url).first.raw_html)
      end
             
      begin
        name_nl = nokogiri_resource_page_nl.css("div.column h1")[0].text.strip
        name_en = nokogiri_resource_page_en.css("div.column h1")[0].text.strip 
        puts "Name: "
        puts name_en
      rescue Exception => e
        puts "Exception name klascement"
        puts e.message
      end
      
      description = ""
      begin
        description_nl = nokogiri_resource_page_nl.css("div.contribution_description")[0].text.strip
        description_en = nokogiri_resource_page_en.css("div.contribution_description")[0].text.strip
        puts "Description: "
        puts description_en
      rescue
        puts "Exception description klascement"
      end
       
      begin
        photo_url = nokogiri_resource_page_en.css("div.logo img")[0]['src']
      rescue Exception => e
        puts "Failed photo klascement"
        puts e.message
        puts e.backtrace.inspect
        photo_url = nil
      end
      
      if photo_url!=nil
        begin
          a = URI.parse(photo_url)
          scraped_resource.element_image=URI.parse(photo_url)
        rescue
          puts "klascement  IMAGEN NO GUARDADA"
          scraped_resource.element_image.clear
        end
      end  

      begin
        nokogiri_resource_page_en.css(".detail div#keywords a").each do |manual_tag|
          manual_tags << manual_tag.text.strip
        end
        puts "Manual tags: "
        puts manual_tags
      rescue
        puts "Failed Manual Tags klascement"
      end         
      
      I18n.locale = "nl"
      scraped_resource.name = name_nl
      scraped_resource.description = description_nl
      scraped_resource.link = resource_url_nl
      scraped_resource.raw_html = raw_html_nl
      I18n.locale = "en"
      scraped_resource.name = name_en
      scraped_resource.description = description_en
      scraped_resource.link = resource_url_en
      scraped_resource.raw_html = raw_html_en
      
      scraped_resource.url = resource_url
      
      scraped_from = "http://www.klascement.be"
      scraped_resource.scraped_from = scraped_from
      
      prosa = name_en + ". " + description_en
          
      scraped_resource.persist(idiomas_disponibles,prosa,manual_tags)
      reintentos = 2

    rescue Exception => e
      puts "Exception scrape_resource_klascement"
      puts e.backtrace.inspect
      puts e.message
      puts reintentos
      if reintentos > 0
        reintentos-=1
        sleep 2
        scrape_resource_klascement(resource_url, resource_url_en, resource_url_nl, raw_html_en, raw_html_nl, 1, reintentos)
      end
    end  
  end
  
end