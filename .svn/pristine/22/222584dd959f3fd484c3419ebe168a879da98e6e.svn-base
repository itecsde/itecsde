class Application < ActiveRecord::Base
  include Taggable
  include Ownable
  include Aggregable
  include Categorizable
  include Scrapeable
  
  
  translates :description
  
  searchable do
    integer :id    
    text :name
    text :tags do |p|
      p.tags.map(&:name)
    end
    
    
    text :w100_wikitopics, :as => :w100_wikitopics do |elem|
       elem.taggable_tag_annotations.map{|annotation| annotation.tag.hashtag if ((annotation.type_tag == "automatic" or annotation.type_tag == "automatic_from_human") && annotation.weight == 1.0)}
    end
    text :w95_wikitopics, :as => :w95_wikitopics do |elem|
       elem.taggable_tag_annotations.map{|annotation| annotation.tag.hashtag if ((annotation.type_tag == "automatic" or annotation.type_tag == "automatic_from_human") && annotation.weight >= 0.95 && annotation.weight < 1.0)}
    end
    text :w90_wikitopics, :as => :w90_wikitopics do |elem|
       elem.taggable_tag_annotations.map{|annotation| annotation.tag.hashtag if ((annotation.type_tag == "automatic" or annotation.type_tag == "automatic_from_human") && annotation.weight >= 0.90 && annotation.weight < 0.95)}
    end
    text :w85_wikitopics, :as => :w85_wikitopics do |elem|
       elem.taggable_tag_annotations.map{|annotation| annotation.tag.hashtag if ((annotation.type_tag == "automatic" or annotation.type_tag == "automatic_from_human") && annotation.weight >= 0.85 && annotation.weight < 0.90)}
    end
    text :w80_wikitopics, :as => :w80_wikitopics do |elem|
       elem.taggable_tag_annotations.map{|annotation| annotation.tag.hashtag if ((annotation.type_tag == "automatic" or annotation.type_tag == "automatic_from_human") && annotation.weight >= 0.80 && annotation.weight < 0.85)}
    end
    text :w75_wikitopics, :as => :w75_wikitopics do |elem|
       elem.taggable_tag_annotations.map{|annotation| annotation.tag.hashtag if ((annotation.type_tag == "automatic" or annotation.type_tag == "automatic_from_human") && annotation.weight >= 0.75 && annotation.weight < 0.80)}
    end
    text :w70_wikitopics, :as => :w70_wikitopics do |elem|
       elem.taggable_tag_annotations.map{|annotation| annotation.tag.hashtag if ((annotation.type_tag == "automatic" or annotation.type_tag == "automatic_from_human") && annotation.weight >= 0.70 && annotation.weight < 0.75)}
    end
    text :w65_wikitopics, :as => :w65_wikitopics do |elem|
       elem.taggable_tag_annotations.map{|annotation| annotation.tag.hashtag if ((annotation.type_tag == "automatic" or annotation.type_tag == "automatic_from_human") && annotation.weight >= 0.65 && annotation.weight < 0.70)}
    end
    text :w60_wikitopics, :as => :w60_wikitopics do |elem|
       elem.taggable_tag_annotations.map{|annotation| annotation.tag.hashtag if ((annotation.type_tag == "automatic" or annotation.type_tag == "automatic_from_human") && annotation.weight >= 0.60 && annotation.weight < 0.65)}
    end
    text :w55_wikitopics, :as => :w55_wikitopics do |elem|
       elem.taggable_tag_annotations.map{|annotation| annotation.tag.hashtag if ((annotation.type_tag == "automatic" or annotation.type_tag == "automatic_from_human") && annotation.weight >= 0.55 && annotation.weight < 0.60)}
    end
    text :w50_wikitopics, :as => :w50_wikitopics do |elem|
       elem.taggable_tag_annotations.map{|annotation| annotation.tag.hashtag if ((annotation.type_tag == "automatic" or annotation.type_tag == "automatic_from_human") && annotation.weight >= 0.50 && annotation.weight < 0.55)}
    end

    text :hashtags_100 do |elem|
       elem.taggable_tag_annotations.map{|annotation| annotation.tag.hashtag if ((annotation.type_tag == "automatic" or annotation.type_tag == "automatic_from_human") && annotation.weight == 1.0)}
    end
    text :hashtags_95 do |elem|
       elem.taggable_tag_annotations.map{|annotation| annotation.tag.hashtag if ((annotation.type_tag == "automatic" or annotation.type_tag == "automatic_from_human") && annotation.weight >= 0.95 && annotation.weight < 1.0)}
    end
    text :hashtags_90 do |elem|
       elem.taggable_tag_annotations.map{|annotation| annotation.tag.hashtag if ((annotation.type_tag == "automatic" or annotation.type_tag == "automatic_from_human") && annotation.weight >= 0.9 && annotation.weight < 0.95)}
    end
    text :hashtags_85 do |elem|
       elem.taggable_tag_annotations.map{|annotation| annotation.tag.hashtag if ((annotation.type_tag == "automatic" or annotation.type_tag == "automatic_from_human") && annotation.weight >= 0.85 && annotation.weight < 0.9)}
    end
    text :hashtags_80 do |elem|
       elem.taggable_tag_annotations.map{|annotation| annotation.tag.hashtag if ((annotation.type_tag == "automatic" or annotation.type_tag == "automatic_from_human") && annotation.weight >= 0.8 && annotation.weight < 0.85)}
    end
    text :hashtags_75 do |elem|
      elem.taggable_tag_annotations.map{|annotation| annotation.tag.hashtag if ((annotation.type_tag == "automatic" or annotation.type_tag == "automatic_from_human") && annotation.weight >= 0.75 && annotation.weight < 0.8)}
    end
    text :hashtags_70 do |elem|
      elem.taggable_tag_annotations.map{|annotation| annotation.tag.hashtag if ((annotation.type_tag == "automatic" or annotation.type_tag == "automatic_from_human") && annotation.weight >= 0.7 && annotation.weight < 0.75)}
    end
    text :hashtags_65 do |elem|
      elem.taggable_tag_annotations.map{|annotation| annotation.tag.hashtag if ((annotation.type_tag == "automatic" or annotation.type_tag == "automatic_from_human") && annotation.weight >= 0.65 && annotation.weight < 0.7)}
    end
    text :hashtags_60 do |elem|
      elem.taggable_tag_annotations.map{|annotation| annotation.tag.hashtag if ((annotation.type_tag == "automatic" or annotation.type_tag == "automatic_from_human") && annotation.weight >= 0.6 && annotation.weight < 0.65)}
    end
    text :hashtags_55 do |elem|
      elem.taggable_tag_annotations.map{|annotation| annotation.tag.hashtag if ((annotation.type_tag == "automatic" or annotation.type_tag == "automatic_from_human") && annotation.weight >= 0.55 && annotation.weight < 0.6)}
    end    
    text :hashtags_50 do |elem|
      elem.taggable_tag_annotations.map{|annotation| annotation.tag.hashtag if ((annotation.type_tag == "automatic" or annotation.type_tag == "automatic_from_human") && annotation.weight < 0.55)}
    end

    
    text :categories do |p|
      p.categories.map(&:name)
    end
    string :translations, :multiple => true do
      translations.map{|translation| translation.locale}
    end 
    #integer :functionality_ids, :multiple=>true, :references => Functionality do |z|
    integer :functionalities, :multiple=>true, :references => Functionality do
      functionalities.map(&:id)
    end
    integer :operating_systems, :multiple => true, :references => OperatingSystem do
      operating_systems.map(&:id)
    end
    string :itec_id    
    I18n.available_locales.each do |locale|
      text "description_" + locale.to_s do
        read_attribute(:description, :locale => locale.to_s)
      end
    end
    
    integer :owner_id
    time :updated_at
  end
    
  has_many :technological_setting_application_annotations
  has_many :technological_settings, :through => :technological_setting_application_annotations
  
  has_many :comments, :as => :commentable, :dependent => :destroy

  has_many :concrete_requirement_tool_annotations, :as => :tool
  has_many :concrete_requirement_tool_assignments, :as => :tool
  has_many :abstract_requirement_tool_assignments, :as => :tool
  
  
  # Relationship with bookmarked_by users
  has_many :bookmark_user_element_annotations, :as => :element, :dependent => :destroy
  has_many :bookmarked_by, :through => :bookmark_user_element_annotations, :source =>:user
  
  
  has_many :application_functionality_annotations, :dependent => :destroy
  has_many :functionalities, :through => :application_functionality_annotations
  
  has_many :application_operating_system_annotations, :dependent => :destroy
  has_many :operating_systems, :through => :application_operating_system_annotations
  
  
  accepts_nested_attributes_for :application_functionality_annotations, :allow_destroy => :true
  accepts_nested_attributes_for :application_operating_system_annotations, :allow_destroy => :true
  
  attr_accessible :element_image, :name, :description, :url, :itec_identificator, :ld_id, :external, :application_functionality_annotations_attributes, :application_operating_system_annotations, :owner_type, :owner_id, :tag_list
  has_attached_file :element_image, :styles => { :original => "300x300>", :medium => "200x200>", :thumb => "30x30>" }, :default_url => "none"
  has_attached_file :icon, :styles => { :original => "300x300>", :medium => "200x200>", :thumb => "30x30>" }, :default_url => "none"
  
def persist(idiomas_disponibles, prosa, array_tags, operating_systems, photo_url, icon_url, old_url)
    recent_hash = Digest::MD5.hexdigest(prosa)
    new_url = self.url
    check_result = check_resource_storage_state(old_url,new_url,recent_hash)
    if check_result == "insert"
      puts "SE INSERTA LA APPLICATION"
      self.info_to_wikify = prosa
      self.hash_resource = recent_hash
      automatic_tags_ids = self.create_automatic_semantic_annotations(prosa)
      self.convert_human_tags_to_wikitopics(array_tags)
      #self.categorize(automatic_tags_ids)
      if photo_url != nil
        self.element_image = URI.parse(photo_url)
      end
      if icon_url != nil
        self.icon = URI.parse(icon_url)
      end
      guardados = Array.new         
      operating_systems.each do |os|        
        case os.downcase.strip
        when "linux"
          os = "Linux"
        when "mac"
          os = "Mac OS X"
        when "windows"
          os = "Windows"
        when "android"
          os = "Android"
        when "android + tablet"
          os = "Android"
        when "iphone", "ipad", "ios"
          os = "IOS"
        when "online"
          os = "Online"
        end                      
        if !os.in?(guardados)
          guardados << os   
          if OperatingSystem.find_by_name(os)!=nil
              annotation = ApplicationOperatingSystemAnnotation.new
              annotation.application = self
              annotation.operating_system_id = OperatingSystem.find_by_name(os).id
              annotation.save                      
          end
        end               
      end #do operating_systems
      self.save
      self.reload
      Sunspot.index self
      Sunspot.commit      
    elsif check_result == "update"
      puts "UPDATE => SE ACTUALIZA LA APPLICATION"
      scraped_application = Application.where(:url => old_url)[0]
      idiomas_disponibles.each do |idioma|
        I18n.locale = idioma
        scraped_application.name = self.name
        scraped_application.description = self.description
      end
      scraped_application.url = self.url
      automatic_tags_ids = scraped_application.create_automatic_semantic_annotations(prosa)
      scraped_application.convert_human_tags_to_wikitopics(array_tags)
      #scraped_application.categorize(automatic_tags_ids)
      if photo_url != nil
        scraped_application.element_image = URI.parse(photo_url)
      end
      if icon_url != nil
        scraped_application.icon = URI.parse(icon_url)
      end
      scraped_application.likes_in_alternative_to = self.likes_in_alternative_to
      scraped_application.info_to_wikify = prosa
      scraped_application.hash_resource = recent_hash
      scraped_application.save
      scraped_application.reload
      Sunspot.index scraped_application
      Sunspot.commit      
    elsif check_result == "do_nothing"
      puts "DO_NOTHING => NI SE INSERTA NI SE ACTUALIZA LA APPLICATION, COMPROBAMOS TRADUCCIONES"
      if Application.where(:url => self.url).size != 0
        application = Application.find_by_url(self.url)
        locales_string = Array.new
        application.translated_locales.each do |locale|
          locales_string << locale.to_s
        end
        idiomas_disponibles_string = Array.new
        idiomas_disponibles.each do |idioma_disponible|
          idiomas_disponibles_string << idioma_disponible.to_s          
        end
        if (idiomas_sin_traducciones = idiomas_disponibles_string - locales_string) != []
          puts "ACTUALIZAMOS TRADUCCIONES"
          idiomas_sin_traducciones.each do |idioma|
            I18n.locale = idioma
            puts I18n.locale
            puts self.description
            application.name = self.name
            application.description = self.description
            application.save
          end
        else
          puts "LAS TRADUCCIONES ESTAN COMPLETAS. NO HACEMOS NADA"
        end
      end
    end   
  end
  
  def check_resource_storage_state(old_url, new_url, recent_hash)
    result = "do_nothing"
    application = Application.where(:url => old_url)
    if application.size > 0
      #puts "hash BD: " + application[0].hash_resource
      #puts "hash actual: " + recent_hash
      if application[0].hash_resource != recent_hash
        result = "update"
      end
    elsif Application.where(:url => new_url).size > 0
      result = "do_nothing"
    else
      result = "insert"
    end
    return result
  end #check_resource_storage_state
  
  def tag_list
    self.tags.map { |t| t.name }.join(", ")
  end

  def tag_list=(new_value)
    tag_names = new_value.split(/,\s+/)
    self.tags = tag_names.map { |name| Tag.where('name = ?', name).first or Tag.create(:name => name.strip) }
  end
  
  
  
end