class SelectorsController < ApplicationController
  def paginate_elements
    element_class = params[:element_class]
    
   case element_class 
      when 'activities'
        if params[:user_id]
          @search = Activity.search do
            fulltext params[:search]
            with :status, 'class'
            with :owner_id, params[:user_id]
            order_by :updated_at, :desc
            paginate :page => params[:page], :per_page => 25
          end
        else
           @search = Activity.search do
            fulltext params[:search]
            with :status, 'class'
              order_by :updated_at, :desc
            paginate :page => params[:page], :per_page => 25
           end
         end
        @elements = @search.results
      when 'tool_requirement_selection'
        if params[:user_id]
          @search = Sunspot.search [Device,Application] do
              fulltext params[:search]
              with :owner_id, params[:user_id]
              order_by :updated_at, :desc
              paginate :page => params[:page], :per_page => 25
           end
        else
           @search = Sunspot.search [Device,Application] do
                fulltext params[:search]
              order_by :updated_at, :desc
              paginate :page => params[:page], :per_page => 25
           end
        end
        @elements = @search.results
      when 'person_requirement_selection'
        if params[:user_id]
          @search = Person.search do
            fulltext params[:search]
            with :owner_id, params[:user_id]
            order_by :updated_at, :desc
            paginate :page => params[:page], :per_page => 25
          end
        else
           @search = Person.search do
            fulltext params[:search]
            order_by :updated_at, :desc
            paginate :page => params[:page], :per_page => 25
          end
         end
        @elements = @search.results
      when 'event_requirement_selection'
        if params[:user_id]
          @search = Event.search do
            fulltext params[:search]
            with :owner_id, params[:user_id]
            order_by :updated_at, :desc
            paginate :page => params[:page], :per_page => 25
          end
        else
           @search = Event.search do
            fulltext params[:search]
            order_by :updated_at, :desc
            paginate :page => params[:page], :per_page => 25
          end
         end
        @elements = @search.results
       when 'content_requirement_selection'
         if params[:user_id]
          @search = Content.search do
            fulltext params[:search]
            with :owner_id, params[:user_id]
            order_by :updated_at, :desc
            paginate :page => params[:page], :per_page => 25
          end
        else
           @search = Content.search do
            fulltext params[:search]
            order_by :updated_at, :desc
            paginate :page => params[:page], :per_page => 25
          end
         end
          @elements = @search.results
      when 'technological_settings'
        @technological_settings = TechnologicalSetting.all(:conditions => { :status => 'class' })
        @elements= Kaminari.paginate_array(@technological_settings).page(params[:page])
      when 'contextual_settings'
        @contextual_settings = ContextualSetting.all(:conditions => { :status => 'class' })
        @elements= Kaminari.paginate_array(@contextual_settings).page(params[:page])
      when 'sequences'
        if params[:user_id]
          @search = ActivitySequence.search do
            fulltext params[:search]
            with :owner_id, params[:user_id]
            with :status, 'class'
            order_by :updated_at, :desc
            paginate :page => params[:page], :per_page => 25
          end
        else
           @search = ActivitySequence.search do
            fulltext params[:search]
            with :status, 'class'
            order_by :updated_at, :desc
            paginate :page => params[:page], :per_page => 25
          end
         end
          @elements = @search.results
      when 'tool_assignment_selection'
        if params[:user_id]
          @search = Sunspot.search [Device,Application] do
              fulltext params[:search]
              with :owner_id, params[:user_id]
              order_by :updated_at, :desc
              paginate :page => params[:page], :per_page => 25
           end
           @elements = @search.results  
        elsif params[:display_bookmarks]
            @aux= current_user.bookmarked_applications
            if @aux.size > 0
              @elements=Sunspot::Search::PaginatedCollection.new(@aux,1,@aux.size,@aux.size)
            else
              @search = Application.search do 
                fulltext "cllldsojfndjdujdsksooeinsujhdff"                
                paginate :page => params[:page], :per_page => 30
              end
               @elements = @search.results                
            end                  
        else
           @search = Sunspot.search [Device,Application] do
              if params[:search]!=nil && params[:search]!=""
                  fulltext params[:search]
              else                          
                if current_user.circumstances != []
                    search_form=current_user.circumstances.first.tag_list_quoted+", "+current_user.circumstances.first.subject.name
                    with :operating_systems, [current_user.circumstances.first.operating_system_id, 6]
                    if current_user.circumstances.first.has_internet == false
                        without :operating_systems, 6
                    end
                    keywords search_form, :fields => [:tags] {minimum_match 1}
                end
              end
              #fulltext params[:search]
              order_by :updated_at, :desc
              paginate :page => params[:page], :per_page => 30
           end
           @elements = @search.results
        end
        
      when 'person_assignment_selection'
        if params[:user_id]
          @search = Person.search do
            fulltext params[:search]
            with :owner_id, params[:user_id]
            order_by :updated_at, :desc
            paginate :page => params[:page], :per_page => 25
          end
          @elements = @search.results
        elsif params[:display_bookmarks]
            @aux= current_user.bookmarked_people
            if @aux.size > 0
              @elements=Sunspot::Search::PaginatedCollection.new(@aux,1,@aux.size,@aux.size)
            else
              @search = Person.search do 
                fulltext "cllldsojfndjdujdsksooeinsujhdff"                
                paginate :page => params[:page], :per_page => 30
              end
               @elements = @search.results
            end         
        else
           @search = Person.search do |query|
              if params[:search]!=nil && params[:search]!=""
                  query.fulltext params[:search]
                  if current_user.circumstances != [] && current_user.circumstances.first.latitude!=nil  
                    query.order_by_geodist(:location, current_user.circumstances.first.latitude, current_user.circumstances.first.longitude)
                  end
              else      
                if current_user.circumstances != []
                  search_terms = current_user.circumstances.first.tag_list_quoted + ", " + current_user.circumstances.first.subject.name
                  query.keywords search_terms, :fields => [:tags, :subjects] {minimum_match 1}
                end
                if current_user.circumstances.first.latitude!=nil  
                  query.order_by_geodist(:location, current_user.circumstances.first.latitude, current_user.circumstances.first.longitude)
                end
              end
              query.paginate :page => params[:page],:per_page => 30 
          end     
          @elements = @search.results
         end
         
      when 'biography_assignment_selection'
        if params[:user_id]
          @search = Biography.search do
            fulltext params[:search]
            with :owner_id, params[:user_id]
            order_by :updated_at, :desc
            paginate :page => params[:page], :per_page => 25
          end
          @elements = @search.results
        elsif params[:display_bookmarks]
            @aux= current_user.bookmarked_biographies
            if @aux.size > 0
              @elements=Sunspot::Search::PaginatedCollection.new(@aux,1,@aux.size,@aux.size)
            else
              @search = Biography.search do 
                fulltext "cllldsojfndjdujdsksooeinsujhdff"                
                paginate :page => params[:page], :per_page => 30
              end
               @elements = @search.results
            end         
        else
           @search = Biography.search do |query|
              if params[:search]!=nil && params[:search]!=""
                  query.fulltext params[:search]
                  if current_user.circumstances != [] && current_user.circumstances.first.latitude!=nil  
                    query.order_by_geodist(:location, current_user.circumstances.first.latitude, current_user.circumstances.first.longitude)
                  end
              else      
                if current_user.circumstances != []
                  search_terms = current_user.circumstances.first.tag_list_quoted + ", " + current_user.circumstances.first.subject.name
                  query.keywords search_terms, :fields => [:tags, :subjects] {minimum_match 1}
                end
                if current_user.circumstances.first.latitude!=nil  
                  query.order_by_geodist(:location, current_user.circumstances.first.latitude, current_user.circumstances.first.longitude)
                end
              end
              query.paginate :page => params[:page],:per_page => 30 
          end     
          @elements = @search.results
         end
        
      when 'event_assignment_selection'
        if params[:user_id]
          @search = Event.search do
            fulltext params[:search]
            with :owner_id, params[:user_id]
            order_by :updated_at, :desc
            paginate :page => params[:page], :per_page => 25
          end
          @elements = @search.results          
          puts @elements
        elsif params[:display_bookmarks]
            @aux= current_user.bookmarked_events
            if @aux.size > 0 
              @elements=Sunspot::Search::PaginatedCollection.new(@aux,1,@aux.size,@aux.size)
            else
              @search = Event.search do 
                fulltext "cllldsojfndjdujdsksooeinsujhdff"                
                paginate :page => params[:page], :per_page => 30
              end
               @elements = @search.results
            end             
        else
          @search = Event.search do |query|
            if params[:search]!=nil && params[:search]!=""
              query.fulltext params[:search]
              if current_user.circumstances != [] && current_user.circumstances.first.latitude!=nil
                query.order_by_geodist(:location, current_user.circumstances.first.latitude, current_user.circumstances.first.longitude)
              end
            else
              if current_user.circumstances != []
                search_terms = current_user.circumstances.first.tag_list_quoted + ", " + current_user.circumstances.first.subject.name
                query.keywords search_terms, :fields => [:tags, :subjects, :name] {minimum_match 1}
                if current_user.circumstances.first.latitude!=nil
                  query.with(:location).in_radius(current_user.circumstances.first.latitude, current_user.circumstances.first.longitude, 2000)       
                  query.order_by_geodist(:location, current_user.circumstances.first.latitude, current_user.circumstances.first.longitude)
                end              
              end
            end           
            query.paginate :page => params[:page],:per_page => 30 
          end
           @elements = @search.results
         end
      
       when 'lecture_assignment_selection'
        if params[:user_id]
          @search = Lecture.search do
            fulltext params[:search]
            with :owner_id, params[:user_id]
            order_by :updated_at, :desc
            paginate :page => params[:page], :per_page => 25
          end
          @elements = @search.results          
          puts @elements
        elsif params[:display_bookmarks]
            @aux= current_user.bookmarked_lectures
            if @aux.size > 0
              @elements=Sunspot::Search::PaginatedCollection.new(@aux,1,@aux.size,@aux.size)
            else
              @search = Lecture.search do 
                fulltext "cllldsojfndjdujdsksooeinsujhdff"                
                paginate :page => params[:page], :per_page => 30
              end
               @elements = @search.results
            end             
        else
          @search = Lecture.search do |query2|
            if params[:search]!=nil && params[:search]!=""
              query2.fulltext params[:search]              
            else
              if current_user.circumstances != []
                search_terms = current_user.circumstances.first.tag_list_quoted + ", " + current_user.circumstances.first.subject.name
                query2.keywords search_terms, :fields => [:tags, :name] {minimum_match 1}
              end     
            end         
            query2.paginate :page => params[:page],:per_page => 30 
          end
           @elements = @search.results
         end
         
      when 'site_assignment_selection'
        if params[:user_id]
          @search = Site.search do
            fulltext params[:search]
            with :owner_id, params[:user_id]
            order_by :updated_at, :desc
            paginate :page => params[:page], :per_page => 25
          end
          @elements = @search.results          
          puts @elements
        elsif params[:display_bookmarks]
            @aux= current_user.bookmarked_sites
            if @aux.size > 0 
              @elements=Sunspot::Search::PaginatedCollection.new(@aux,1,@aux.size,@aux.size)
            else
              @search = Site.search do 
                fulltext "cllldsojfndjdujdsksooeinsujhdff"                
                paginate :page => params[:page], :per_page => 30
              end
               @elements = @search.results
            end             
        else
          @search = Site.search do |query|
            if params[:search]!=nil && params[:search]!=""
              query.fulltext params[:search]
              if current_user.circumstances != [] && current_user.circumstances.first.latitude!=nil
                query.order_by_geodist(:location, current_user.circumstances.first.latitude, current_user.circumstances.first.longitude)
              end                            
            else
              if current_user.circumstances != []              
                search_terms = current_user.circumstances.first.tag_list_quoted + ", " + current_user.circumstances.first.subject.name             
                query.keywords search_terms, :fields => [:tags, :name] {minimum_match 1}
                if current_user.circumstances.first.latitude!=nil
                  query.with(:location).in_radius(current_user.circumstances.first.latitude, current_user.circumstances.first.longitude, 500)       
                  query.order_by_geodist(:location, current_user.circumstances.first.latitude, current_user.circumstances.first.longitude)
                end              
              end
            end
            query.paginate :page => params[:page],:per_page => 30 
          end
           @elements = @search.results
         end
      
      
      when 'documentary_assignment_selection'
        if params[:user_id]
          @search = Documentary.search do
            fulltext params[:search]
            with :owner_id, params[:user_id]
            order_by :updated_at, :desc
            paginate :page => params[:page], :per_page => 25
          end
          @elements = @search.results          
          puts @elements
        elsif params[:display_bookmarks]
            @aux= current_user.bookmarked_documentaries
            if @aux.size > 0
              @elements=Sunspot::Search::PaginatedCollection.new(@aux,1,@aux.size,@aux.size)
            else
              @search = Documentary.search do 
                fulltext "cllldsojfndjdujdsksooeinsujhdff"                
                paginate :page => params[:page], :per_page => 30
              end
               @elements = @search.results
            end             
        else
          @search = Documentary.search do |query2|
            if params[:search]!=nil && params[:search]!=""
              query2.fulltext params[:search]              
            else
              if current_user.circumstances != []
                search_terms = current_user.circumstances.first.tag_list_quoted + ", " + current_user.circumstances.first.subject.name
                query2.keywords search_terms, :fields => [:tags, :name] {minimum_match 1}
              end     
            end         
            query2.paginate :page => params[:page],:per_page => 30 
          end
           @elements = @search.results
         end 
      
        
      when 'alternatives'
         if params[:contribution_type]=="event"
              tags=Event.find(params[:contribution_id]).tag_list              
              @search = Event.search do |query|
                search_terms = tags
                query.keywords search_terms, :fields => [:tags, :subjects] {minimum_match 1}
                query.paginate :page => params[:page], :per_page => 25
                if current_user.circumstances.first.latitude!=nil  
                    query.order_by_geodist(:location, current_user.circumstances.first.latitude, current_user.circumstances.first.longitude)
                end
              end
         
         elsif params[:contribution_type]=="biography"
              tags=Biography.find(params[:contribution_id]).tag_list              
              @search = Biography.search do |query|
                search_terms = tags
                query.keywords search_terms, :fields => [:tags, :subjects] {minimum_match 1}
                query.paginate :page => params[:page], :per_page => 25                
              end       
         
         elsif params[:contribution_type]=="person"
              tags=Person.find(params[:contribution_id]).tag_list              
              @search = Person.search do |query|
                search_terms = tags
                query.keywords search_terms, :fields => [:tags, :subjects] {minimum_match 1}
                query.paginate :page => params[:page], :per_page => 25
                if current_user.circumstances.first.latitude!=nil  
                    query.order_by_geodist(:location, current_user.circumstances.first.latitude, current_user.circumstances.first.longitude)
                end
              end        
         elsif params[:contribution_type]=="application"
              tags=Application.find(params[:contribution_id]).tag_list
              functionalities=Application.find(params[:contribution_id]).functionalities      
              @search = Application.search do
                if current_user.circumstances != []
                  with :operating_systems, [current_user.circumstances.first.operating_system_id, 6]
                  if current_user.circumstances.first.has_internet == false
                      without :operating_systems, 6
                  end
                  keywords tags, :fields => [:tags] {minimum_match 1}
                  paginate :page => params[:page], :per_page => 25
                  #with :functionalities, params[:functionality]
                end
              end
         elsif params[:contribution_type]=="lecture"
              tags=Lecture.find(params[:contribution_id]).tag_list
              @search = Lecture.search do
                  if current_user.circumstances != []                    
                    keywords tags, :fields => [:tags] {minimum_match 1}    
                    #fulltext current_user.circumstances.first.locale.name, :fields => [:languages]                
                  end              
                  paginate :page => params[:page],:per_page => 30
              end
         elsif params[:contribution_type]=="site"
              tags=Site.find(params[:contribution_id]).tag_list              
              @search = Site.search do |query|
                search_terms = tags
                query.keywords search_terms, :fields => [:tags, :name] {minimum_match 1}
                query.paginate :page => params[:page], :per_page => 25
                if current_user.circumstances.first.latitude!=nil  
                    query.order_by_geodist(:location, current_user.circumstances.first.latitude, current_user.circumstances.first.longitude)
                end
              end
         elsif params[:contribution_type]=="documentary"
              tags=Documentary.find(params[:contribution_id]).tag_list
              @search = Documentary.search do
                  if current_user.circumstances != []                    
                    keywords tags, :fields => [:tags] {minimum_match 1}    
                    #fulltext current_user.circumstances.first.locale.name, :fields => [:languages]                
                  end              
                  paginate :page => params[:page],:per_page => 30
              end

         elsif params[:contribution_type]=="activity"
            @search = Activity.search do
                fulltext "a"
                order_by :updated_at, :desc
                paginate :page => params[:page], :per_page => 25
              end
         end         
         @elements = @search.results   
      
      when 'activity_assignment_selection'
        if params[:user_id]
          @search = Activity.search do
            fulltext params[:search]
            with :status, 'class'
            with :owner_id, params[:user_id]
            order_by :updated_at, :desc
            paginate :page => params[:page], :per_page => 25
          end
        else
           @search = Activity.search do
            fulltext params[:search]
            with :status, 'class'
            order_by :updated_at, :desc
            paginate :page => params[:page], :per_page => 25
           end
         end
        @elements = @search.results
      
       
      when 'technological_setting_device_selection'
        if params[:user_id]
          @search = Device.search do
            fulltext params[:search]
            with :owner_id, params[:user_id]
            order_by :updated_at, :desc
            paginate :page => params[:page], :per_page => 25
          end
        else
           @search = Device.search do
            fulltext params[:search]
            order_by :updated_at, :desc
            paginate :page => params[:page], :per_page => 25
          end
         end
        @elements = @search.results
      when 'technological_setting_application_selection'
        if params[:user_id]
          @search = Application.search do
            fulltext params[:search]
            with :owner_id, params[:user_id]
            order_by :updated_at, :desc
            paginate :page => params[:page], :per_page => 25
          end
        else
          @search = Application.search do
            fulltext params[:search]
            order_by :updated_at, :desc
            paginate :page => params[:page], :per_page => 25
          end
        end
        @elements = @search.results
      when 'guides'
        if params[:user_id]
          @search = Guide.search do
            fulltext params[:search]
            with :owner_id, params[:user_id]
            order_by :updated_at, :desc
            paginate :page => params[:page], :per_page => 25
          end
        else
           @search = Guide.search do
            fulltext params[:search]
            order_by :updated_at, :desc
            paginate :page => params[:page], :per_page => 25
          end
         end
        @elements = @search.results
      when 'experiences'
        if params[:user_id]
          @search = Experience.search do
            fulltext params[:search]
            with :owner_id, params[:user_id]
            order_by :updated_at, :desc
            paginate :page => params[:page], :per_page => 25
          end
        else
           @search = Experience.search do
            fulltext params[:search]
            order_by :updated_at, :desc
            paginate :page => params[:page], :per_page => 25
          end
         end
        @elements = @search.results
      when 'resources'
        if params[:user_id]
          @search = Sunspot.search [Device,Application,Content,Person,Event] do
              fulltext params[:search]
              with :owner_id, params[:user_id]
              order_by :updated_at, :desc
              paginate :page => params[:page], :per_page => 25
           end
        else
           @search = Sunspot.search [Device,Application,Content,Person,Event] do
                fulltext params[:search]
              order_by :updated_at, :desc
              paginate :page => params[:page], :per_page => 25
           end
        end
        @elements = @search.results
        
      when 'group_user_selection'
         @search = User.search do
            fulltext params[:search]
            paginate :page => params[:page], :per_page => 25          
          end
        @elements = @search.results
        
      when 'group_selection'
         @search = Group.search do
            fulltext params[:search]
            paginate :page => params[:page], :per_page => 25          
          end
        @elements = @search.results
    end 
    
    if params[:refresh_popup]
      @refresh_popup= params[:refresh_popup]
    else
      @refresh_popup= 'false'
    end
    #@refresh_popup='true'
    if element_class=="alternatives"
      element_class="element_assignment_selection"
    end
    @callback_parameter= element_class
     respond_to do |format|
      format.js
    end
  end
end